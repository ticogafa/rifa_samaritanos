#!/usr/bin/env python3
import os
import sys
import platform
import subprocess
import site
import shutil

def clear_screen():
    """Limpa a tela do console em diferentes sistemas operacionais"""
    if platform.system() == "Windows":
        os.system("cls")
    else:
        os.system("clear")

def print_header():
    """Exibe o cabe√ßalho do programa de configura√ß√£o"""
    print("\n" + "=" * 60)
    print(" CONFIGURA√á√ÉO DO SISTEMA DE RIFAS ".center(60))
    print(" Samaritanos ".center(60))
    print("=" * 60 + "\n")

def verificar_tkinter():
    """Verifica se o Tkinter est√° instalado"""
    try:
        import tkinter
        print("‚úÖ Tkinter est√° instalado corretamente!")
        return True
    except ImportError:
        print("‚ùå Tkinter n√£o est√° instalado!")
        return False

def verificar_dependencias():
    """Verifica todas as depend√™ncias necess√°rias"""
    print("Verificando depend√™ncias...\n")
    
    tkinter_ok = verificar_tkinter()
    
    # Verificar permiss√µes de execu√ß√£o dos scripts
    iniciar_rifa_sh = os.path.join(os.path.dirname(__file__), "iniciar_rifa.sh")
    if os.path.exists(iniciar_rifa_sh) and not os.access(iniciar_rifa_sh, os.X_OK):
        try:
            os.chmod(iniciar_rifa_sh, 0o755)
            print("‚úÖ Permiss√µes de execu√ß√£o adicionadas ao iniciar_rifa.sh")
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel adicionar permiss√µes de execu√ß√£o ao iniciar_rifa_sh: {e}")
    
    # Verificar arquivos essenciais
    arquivos_essenciais = [
        "iniciar_rifa.py", 
        "rifa_manager.py", 
        "rifa_gui.py"
    ]
    
    arquivos_faltando = []
    for arquivo in arquivos_essenciais:
        caminho = os.path.join(os.path.dirname(__file__), arquivo)
        if os.path.exists(caminho):
            print(f"‚úÖ Arquivo {arquivo} encontrado")
        else:
            print(f"‚ö†Ô∏è Arquivo {arquivo} n√£o encontrado!")
            arquivos_faltando.append(arquivo)
    
    # Verificar arquivo de dados
    arquivo_rifas = os.path.join(os.path.dirname(__file__), "rifas.csv")
    if not os.path.exists(arquivo_rifas):
        print("‚ÑπÔ∏è Arquivo rifas.csv n√£o encontrado. Ser√° criado automaticamente ao iniciar o programa.")
    else:
        print("‚úÖ Arquivo rifas.csv encontrado")
    
    print("\nResumo das verifica√ß√µes:")
    if tkinter_ok:
        print("‚úÖ Interface gr√°fica: Dispon√≠vel")
    else:
        print("‚ö†Ô∏è Interface gr√°fica: N√£o dispon√≠vel (falta Tkinter)")
    
    if arquivos_faltando:
        print(f"‚ö†Ô∏è Alguns arquivos est√£o faltando: {', '.join(arquivos_faltando)}")
    else:
        print("‚úÖ Todos os arquivos essenciais est√£o presentes")
    
    return tkinter_ok

def instalar_tkinter():
    """Fornece instru√ß√µes para instala√ß√£o do Tkinter"""
    sistema = platform.system().lower()
    
    print("\nPara instalar o Tkinter (necess√°rio para a interface gr√°fica):")
    
    if sistema == "linux":
        if os.path.exists("/etc/debian_version"):  # Debian, Ubuntu, etc.
            print("Execute no terminal:")
            print("    sudo apt-get install python3-tk")
        elif os.path.exists("/etc/redhat-release"):  # Fedora, RHEL, etc.
            print("Execute no terminal:")
            print("    sudo dnf install python3-tkinter")
        else:
            print("Execute o comando apropriado para instalar o pacote 'python3-tk' na sua distribui√ß√£o Linux.")
    
    elif sistema == "darwin":  # macOS
        print("No macOS, voc√™ pode instalar o Python com Tkinter atrav√©s do site oficial:")
        print("    https://www.python.org/downloads/macos/")
        print("Certifique-se de que a op√ß√£o tcl/tk esteja marcada durante a instala√ß√£o.")
    
    elif sistema == "windows":
        print("No Windows, reinstale o Python pelo site oficial:")
        print("    https://www.python.org/downloads/windows/")
        print("Durante a instala√ß√£o, certifique-se de marcar a op√ß√£o 'tcl/tk and IDLE'.")
    
    print("\nAp√≥s a instala√ß√£o, execute este script novamente.")

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 6):
        print("‚ö†Ô∏è Este programa requer Python 3.6 ou superior.")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} detectado")
    return True

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    print("\nüì¶ Verificando depend√™ncias necess√°rias...")
    
    # Lista de pacotes necess√°rios (exclu√≠mos tkinter pois √© tratado separadamente)
    requirements = ["pillow", "pandas", "openpyxl"]
    
    installed_packages = []
    failed_packages = []
    
    for package in requirements:
        try:
            # Verificar se o pacote j√° est√° instalado
            __import__(package.lower().replace('-', '_'))
            print(f"‚úÖ {package} j√° est√° instalado.")
            installed_packages.append(package)
        except ImportError:
            print(f"‚ÑπÔ∏è Instalando {package}...")
            try:
                # Suprimindo a sa√≠da do pip para evitar mensagens de erro desnecess√°rias
                with open(os.devnull, 'w') as devnull:
                    subprocess.run(
                        [sys.executable, "-m", "pip", "install", "--user", package],
                        check=True,
                        stdout=devnull,
                        stderr=devnull
                    )
                print(f"‚úÖ {package} instalado com sucesso.")
                installed_packages.append(package)
            except subprocess.CalledProcessError:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel instalar {package}. Este pacote n√£o √© essencial.")
                failed_packages.append(package)
    
    print(f"\n‚úÖ {len(installed_packages)} pacotes verificados/instalados com sucesso.")
    if failed_packages:
        print(f"‚ö†Ô∏è {len(failed_packages)} pacotes n√£o puderam ser instalados, mas n√£o s√£o essenciais.")
    
    return True

def create_launcher_scripts():
    """Cria scripts de inicializa√ß√£o .bat e .sh"""
    print("\nüî® Criando scripts de inicializa√ß√£o...")
    base_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Criando o script .bat para Windows
    bat_path = os.path.join(base_dir, "iniciar_rifa.bat")
    with open(bat_path, "w") as bat_file:
        bat_file.write("@echo off\n")
        bat_file.write("title Sistema de Rifas Samaritanos\n")
        bat_file.write("cls\n")
        bat_file.write("echo Iniciando Sistema de Rifas...\n")
        bat_file.write("python iniciar_rifa.py\n")
        bat_file.write("if errorlevel 1 (\n")
        bat_file.write("    echo.\n")
        bat_file.write("    echo Ocorreu um erro ao iniciar o programa.\n")
        bat_file.write("    echo Verifique se o Python esta instalado corretamente.\n")
        bat_file.write("    pause\n")
        bat_file.write(")\n")
    print(f"‚úÖ Script de inicializa√ß√£o Windows criado: {bat_path}")
    
    # Criando o script .sh para Linux/macOS
    sh_path = os.path.join(base_dir, "iniciar_rifa.sh")
    with open(sh_path, "w") as sh_file:
        sh_file.write("#!/bin/bash\n")
        sh_file.write("clear\n")
        sh_file.write('echo "Iniciando Sistema de Rifas..."\n')
        sh_file.write('python3 iniciar_rifa.py\n')
        sh_file.write('if [ $? -ne 0 ]; then\n')
        sh_file.write('    echo ""\n')
        sh_file.write('    echo "Ocorreu um erro ao iniciar o programa."\n')
        sh_file.write('    echo "Verifique se o Python est√° instalado corretamente."\n')
        sh_file.write('    read -p "Pressione ENTER para continuar..."\n')
        sh_file.write('fi\n')
    
    # Adicionar permiss√£o de execu√ß√£o ao script .sh
    try:
        os.chmod(sh_path, 0o755)
        print(f"‚úÖ Script de inicializa√ß√£o Linux/macOS criado: {sh_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è Script {sh_path} criado, mas n√£o foi poss√≠vel adicionar permiss√£o de execu√ß√£o.")
        print(f"   Voc√™ pode adicionar manualmente com: chmod +x {sh_path}")
    
    return True

def main():
    clear_screen()
    print_header()
    
    print("Este script ir√° configurar o Sistema de Rifas Beneficentes.\n")
    
    if not check_python_version():
        print("\n‚ö†Ô∏è Vers√£o do Python incompat√≠vel.")
        print("   Por favor, instale o Python 3.6 ou superior e execute este script novamente.")
        input("\nPressione ENTER para sair...")
        return False
    
    # Verificar depend√™ncias
    tkinter_ok = verificar_dependencias()
    
    # Criar scripts de inicializa√ß√£o
    scripts_ok = create_launcher_scripts()
    
    # Se faltar o Tkinter, fornecer instru√ß√µes de instala√ß√£o
    if not tkinter_ok:
        print("\n‚ÑπÔ∏è O Tkinter √© necess√°rio para a interface gr√°fica.")
        instalar_tkinter()
    
    # Instalar depend√™ncias Python
    deps_ok = install_requirements()
    
    print("\n" + "=" * 60)
    print("‚úÖ Configura√ß√£o conclu√≠da!")
    print("\nVoc√™ pode iniciar o programa de duas formas:")
    print("1. Execute o arquivo 'iniciar_rifa.py'")
    if scripts_ok:
        print("2. No Linux/macOS: Execute './iniciar_rifa.sh'")
        print("   No Windows: Execute 'iniciar_rifa.bat'")
    
    if not tkinter_ok:
        print("\n‚ÑπÔ∏è Nota: A interface gr√°fica n√£o estar√° dispon√≠vel at√© que o Tkinter seja instalado.")
        print("   O programa ir√° funcionar apenas no modo de terminal.")
    
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ÑπÔ∏è Configura√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ö†Ô∏è Ocorreu um erro inesperado: {e}")
        print("   Por favor, tente executar o script novamente.")
        input("\nPressione ENTER para sair...")
